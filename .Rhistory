a=[[1]]
a=list(1)
a
sourceCpp("
List Pu;
IntegerVector inner(1,1);
for (int i=0; i<10; i++){
Pu.push_back(inner); return Pu;
}")
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Pu=sample_cpp(10)
Pu
Pu[1]
typeof(Pu[1])
Q_function(3,3, init$tau, init$alpha, init$transition_matrices, Pu,  Pi,  init$Y1, init$X)
warnings()
Pi.size()
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
size_print(Pi)
Pui=Pu[1]
Pui
size_print(Pui)
X_i=X[1]
X_i=init$X[1]
X_i
Li=size_print(Pui)
X_i[1]
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Q_test(3,3, init$tau, init$alpha, init$transition_matrices, Pu,  Pi,  init$Y1, init$X)
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Q_test(3,3, init$tau, init$alpha, init$transition_matrices, Pu,  Pi,  init$Y1, init$X)
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Q_test(3,3, init$tau, init$alpha, init$transition_matrices, Pu,  Pi,  init$Y1, init$X)
warnings()
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Q_test(3,3, init$tau, init$alpha, init$transition_matrices, Pu,  Pi,  init$Y1, init$X)
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Q_test(3,3, init$tau, init$alpha, init$transition_matrices, Pu,  Pi,  init$Y1, init$X)
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Q_test(3,3, init$tau, init$alpha, init$transition_matrices, Pu,  Pi,  init$Y1, init$X)
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Q_test(3,3, init$tau, init$alpha, init$transition_matrices, Pu,  Pi,  init$Y1, init$X)
Pi
warnings()
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Rcpp::sourceCpp("Documents/CategoricalSequences/Test.cpp")
Pi_i_test(init$Y1[1], 3, init$tau, init$alpha, init$transition_matrices, init$X[1])
Pi_i_test(init$Y1, 3, init$tau, init$alpha, init$transition_matrices, init$X)
Rcpp::sourceCpp("Documents/CategoricalSequences/src/05_EM_Step.cpp")
E_Step(3, init$X, init$Y1, init$tau, init$transition_matrices)
E_Step(3, init$X, init$Y1, init$tau, init$alpha ,init$transition_matrices)
View(transitionMatrices)
Rcpp::sourceCpp("Documents/CategoricalSequences/src/05_EM_Step.cpp")
Rcpp::sourceCpp("Documents/CategoricalSequences/src/05_EM_Step.cpp")
Rcpp::sourceCpp("Documents/CategoricalSequences/src/05_EM_Step.cpp")
Rcpp::sourceCpp("Documents/CategoricalSequences/src/05_EM_Step.cpp")
Rcpp::sourceCpp("Documents/CategoricalSequences/src/05_EM_Step.cpp")
Rcpp::sourceCpp("Documents/CategoricalSequences/src/05_EM_Step.cpp")
# Example usage
set.seed(42)
nSequences <- 10
sequenceLengthMax <- 25
sequenceLengthMin <- 20
nClusters <- 3
nCategories <- 3
# Create example transition matrices
transitionMatrices <- list()
for (i in 1:nClusters) {
transitionMatrix <- matrix(runif(nCategories * nCategories), nCategories, nCategories)
transitionMatrix <- transitionMatrix / rowSums(transitionMatrix)
transitionMatrices[[i]] <- round(transitionMatrix,2)
}
print('Transition Matrices')
print(transitionMatrices)
# Create initial probabilities for each cluster
initialProbabilities <- matrix(runif(nClusters * nCategories), nClusters, nCategories)
initialProbabilities <- initialProbabilities / rowSums(initialProbabilities)
mixing_prob <- c(0.4, 0.2, 0.4)
syntheticData <- generateSyntheticData(nSequences, sequenceLengthMin, sequenceLengthMax, nClusters, mixing_prob, transitionMatrices, initialProbabilities)
library(Rcpp)
#setwd("~/Documents/ClickstreamMixtures")
#library(microbenchmark)
sourceCpp('01_SyntheticMixtureData.cpp')
sourceCpp('02_Initialize.cpp')
sourceCpp('03_RandomWalkImpute.cpp')
# Example usage
set.seed(42)
nSequences <- 10
sequenceLengthMax <- 25
sequenceLengthMin <- 20
nClusters <- 3
nCategories <- 3
# Create example transition matrices
transitionMatrices <- list()
for (i in 1:nClusters) {
transitionMatrix <- matrix(runif(nCategories * nCategories), nCategories, nCategories)
transitionMatrix <- transitionMatrix / rowSums(transitionMatrix)
transitionMatrices[[i]] <- round(transitionMatrix,2)
}
print('Transition Matrices')
print(transitionMatrices)
# Create initial probabilities for each cluster
initialProbabilities <- matrix(runif(nClusters * nCategories), nClusters, nCategories)
initialProbabilities <- initialProbabilities / rowSums(initialProbabilities)
mixing_prob <- c(0.4, 0.2, 0.4)
syntheticData <- generateSyntheticData(nSequences, sequenceLengthMin, sequenceLengthMax, nClusters, mixing_prob, transitionMatrices, initialProbabilities)
#print(syntheticData)
syntheticData$sequences<- RandomImputeList(syntheticData$sequences, .25)
init=InitializeParameters(syntheticData$sequences,3,3, 0)
init$init_X[1]
y=AllSeqJointImputeR(syntheticData$sequences, init$initial_values_alpha[2,], init$transition_matrices[[1]], 10)
y=AllSeqJointImputeRCPP(syntheticData$sequences, init$initial_values_alpha[2,], init$transition_matrices[[1]], 10)
init$initial_values_alpha
init
y=AllSeqJointImputeRCPP(syntheticData$sequences, init$alpha[2,], init$transition_matrices[[1]], 10)
y=AllSeqJointImputeRCPP(syntheticData$sequences, init$alpha[2,], init$transition_matrices[[1]], 10)
y=AllSeqJointImputeRCPP(syntheticData$sequences, init$alpha , init$transition_matrices[[1]], 10)
AllSeqJointImputeRCPP(syntheticData$sequences, init$alpha, init$transition_matrices, 10)
View(AllSeqJointImputeRCPP)
AllSeqJointImputeRCPP(syntheticData$sequences, init$alpha[2,], init$transition_matrices[[1]], 10)
init$alpha[2,]
init$transition_matrices[[1]]
library(Rcpp)
#setwd("~/Documents/ClickstreamMixtures")
#library(microbenchmark)
sourceCpp('01_SyntheticMixtureData.cpp')
pwd
wd
sourceCpp('02_Initialize.cpp')
sourceCpp('03_RandomWalkImpute.cpp')
# Example usage
set.seed(42)
nSequences <- 10
sequenceLengthMax <- 25
sequenceLengthMin <- 20
nClusters <- 3
nCategories <- 3
# Create example transition matrices
transitionMatrices <- list()
for (i in 1:nClusters) {
transitionMatrix <- matrix(runif(nCategories * nCategories), nCategories, nCategories)
transitionMatrix <- transitionMatrix / rowSums(transitionMatrix)
transitionMatrices[[i]] <- round(transitionMatrix,2)
}
print('Transition Matrices')
print(transitionMatrices)
# Create initial probabilities for each cluster
initialProbabilities <- matrix(runif(nClusters * nCategories), nClusters, nCategories)
initialProbabilities <- initialProbabilities / rowSums(initialProbabilities)
mixing_prob <- c(0.4, 0.2, 0.4)
syntheticData <- generateSyntheticData(nSequences, sequenceLengthMin, sequenceLengthMax, nClusters, mixing_prob, transitionMatrices, initialProbabilities)
#print(syntheticData)
syntheticData$sequences<- RandomImputeList(syntheticData$sequences, .25)
init=InitializeParameters(syntheticData$sequences,3,3, 0)
init$alpha
init1$init_X[1]
init1=InitializeParameters(syntheticData$sequences,3,3, 0)
init1$init_X[1]
y=AllSeqJointImputeR(syntheticData$sequences, init$initial_values_alpha[2,], init$transition_matrices[[1]], 10)
y=AllSeqJointImputeRCPP(syntheticData$sequences, init$initial_values_alpha[2,], init$transition_matrices[[1]], 10)
getwd()
library(Rcpp)
files <- list.files(pattern = "\\.RData$", recursive = TRUE)
file.remove(files)
install.packages("renv")
install.packages("renv")
setwd("~/Documents/CategoricalSequences/src")
renv::init()
y
renv::init()
library(Rcpp)
#setwd("~/Documents/ClickstreamMixtures")
#library(microbenchmark)
sourceCpp('01_SyntheticMixtureData.cpp')
sourceCpp('02_Initialize.cpp')
sourceCpp('03_RandomWalkImpute.cpp')
# Example usage
set.seed(1)
nSequences <- 50
sequenceLengthMax <- 25
sequenceLengthMin <- 20
nClusters <- 3
nCategories <- 3
# Create example transition matrices
transitionMatrices <- list()
for (i in 1:nClusters) {
transitionMatrix <- matrix(runif(nCategories * nCategories), nCategories, nCategories)
transitionMatrix <- transitionMatrix / rowSums(transitionMatrix)
transitionMatrices[[i]] <- round(transitionMatrix,2)
}
print('Transition Matrices')
print(transitionMatrices)
# Create initial probabilities for each cluster
initialProbabilities <- matrix(runif(nClusters * nCategories), nClusters, nCategories)
initialProbabilities <- initialProbabilities / rowSums(initialProbabilities)
mixing_prob <- c(0.4, 0.2, 0.4)
syntheticData <- generateSyntheticData(nSequences, sequenceLengthMin, sequenceLengthMax, nClusters, mixing_prob, transitionMatrices, initialProbabilities)
#print(syntheticData)
syntheticData$sequences<- RandomImputeList(syntheticData$sequences, .15)
init=InitializeParameters(syntheticData$sequences,3,3, seed=42)
init
y=AllSeqJointImputeRCPP(syntheticData$sequences, init$alpha[2,], init$transition_matrices[[1]], 10)
y
sourceCpp('04_TransitionsCount.cpp')
Rcpp::sourceCpp("04_TransitionsCount.cpp")
XY=TransitionsCount_Y1(syntheticData$sequences,nCategories,y)
XY
XY[[1]]
len(XY1)
length(XY1)
length(XY)
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("04_TransitionsCount.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Pi_i(y[[1]], 3, init$tau, init$alpha, init$transition_matrices)
Pi_i(y[[1]], 3, init$tau, init$alpha, init$transition_matrices, XY[[1]]$x_i)
y[[1]]
Pi_i(XY[[1]]$Y_i1, 3, init$tau, init$alpha, init$transition_matrices, XY[[1]]$x_i)
Rcpp::sourceCpp("debug_codes.cpp")
E_Step(3, XY, init$tau, init$alpha, init$transition_matrices)
warnings()
Rcpp::sourceCpp("debug_codes.cpp")
E_Step(3, XY, init$tau, init$alpha, init$transition_matrices)
warnings()
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
E_Step(3, XY, init$tau, init$alpha, init$transition_matrices)
warnings()
Rcpp::sourceCpp("debug_codes.cpp")
E_Step(3, XY, init$tau, init$alpha, init$transition_matrices)
a=E_Step(3, XY, init$tau, init$alpha, init$transition_matrices)
warnings();
Rcpp::sourceCpp("debug_codes.cpp")
a=E_Step(3, XY, init$tau, init$alpha, init$transition_matrices)
Rcpp::sourceCpp("debug_codes.cpp")
a=E_Step(3, XY, init$tau, init$alpha, init$transition_matrices)
init$tau
Rcpp::sourceCpp("debug_codes.cpp")
a=E_Step(3, XY, init$tau, init$alpha, init$transition_matrices)
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
a=E_Step(3, XY, init$tau, init$alpha, init$transition_matrices)
Rcpp::sourceCpp("debug_codes.cpp")
a=E_Step(3, XY, init$tau, init$alpha, init$transition_matrices)
a
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("04_TransitionsCount.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
a
y
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
mstep=M_step(3,3,y,a,XY)
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
mstep=M_step(3,3,y,a,XY)
mstep
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
q=Q_function(3,3,mstep,y, a,XY)
warnings()
Rcpp::sourceCpp("debug_codes.cpp")
q=Q_function(3,3,mstep,y, a,XY)
Rcpp::sourceCpp("debug_codes.cpp")
q=Q_function(3,3,mstep,y, a,XY)
warnings()
Rcpp::sourceCpp("debug_codes.cpp")
q=Q_function(3,3,mstep,y, a,XY)
a
Rcpp::sourceCpp("debug_codes.cpp")
q=Q_function(3,3,mstep,y, a,XY)
Rcpp::sourceCpp("debug_codes.cpp")
q=Q_function(3,3,mstep,y, a,XY)
Rcpp::sourceCpp("debug_codes.cpp")
q=Q_function(3,3,mstep,y, a,XY)
q
exp(q)
Rcpp::sourceCpp("02_Initialize.cpp")
Rcpp::sourceCpp("debug_codes.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
View(AllSeqJointImputeRCPP)
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
RNG_Init(syntheticData$sequences, 3,3)
Rcpp::sourceCpp("06_RNG_Init.cpp")
RNG_Init(syntheticData$sequences, 3,3)
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
RNG_Init(syntheticData$sequences, 3,3)
Rcpp::sourceCpp("06_RNG_Init.cpp")
RNG_Init(syntheticData$sequences, 3,3)
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
RandomInitLikelihood(syntheticData$sequences, 3,3,42)
Rcpp::sourceCpp("06_RNG_Init.cpp")
RNG_Init(syntheticData$sequences, 3,3)
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
Rcpp::sourceCpp("06_RNG_Init.cpp")
init
init$tau
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
init_params=InitializeParameters(syntheticData$sequences,3,3,42)
syntheticData
syntheticData$sequences
init_params=InitializeParameters(syntheticData$sequences,3, 3, 42)
seed=42
init_params=InitializeParameters(syntheticData$sequences,3, 3,seed)
Rcpp::sourceCpp("02_Initialize.cpp")
init=InitializeParameters(syntheticData$sequences,3,3, seed=42)
init
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
y=AllSeqJointImputeRCPP(syntheticData$sequences, init, 10)
y
imputes_R=AllSeqJointImputeR(syntheticData$sequences, init, 10)
imputes_R
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
XY=TransitionsCount_Y1(syntheticData$sequences,nCategories,y)
e_step=E_Step(3, XY, init)
e_steep
e_step
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
cur_params=M_Step(3,3, imputes_R, e_step, 10)
Rcpp::sourceCpp("05_EM_Step.cpp")
cur_params = M_Step(3,3, imputes_R, e_step, XY)
cur_params = M_Step(3,3, y, e_step, XY)
cur_params
iter2=AllSeqJointImputePi(syntheticData$sequences,cur_params, y,e_step, 10)
i=1
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
iter2=AllSeqJointImputePi(syntheticData$sequences,cur_params, y,e_step, 10)
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
iter2=AllSeqJointImputePi(syntheticData$sequences,cur_params, y,e_step, 10)
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
iter2=AllSeqJointImputePi(syntheticData$sequences,cur_params, y,e_step, 10)
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
iter2=AllSeqJointImputePi(syntheticData$sequences,cur_params, y,e_step, 10)
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
iter2=AllSeqJointImputePi(syntheticData$sequences,cur_params, y,e_step, 10)
y
cur_params
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
sum(cur_params$tau)
ur_params$tau
cur_params$tau
sum(init$tau)
iter2=AllSeqJointImputePi(syntheticData$sequences,init, y,e_step, 10)
init$gamma
init$gamma[[1]]
rowSum(init$gamma[[1]])
rowSums(init$gamma[[1]])
rowSums(init$tau)
rowSums(init$alpha)
y=AllSeqJointImputeRCPP(syntheticData$sequences, init, 10)
sum(y[[1]]$probabilities)
imputes_R=AllSeqJointImputeR(syntheticData$sequences, init, 10)
XY=TransitionsCount_Y1(syntheticData$sequences,nCategories,y)
e_step[[1]]
colsSums(e_step[[1]])
colSums(e_step[[1]])
rowSums(e_step[[1]])
e_step[[1]]*y[[1]]$probabilities
rowSums(e_step[[1]]*y[[1]]$probabilities)
sum(rowSums(e_step[[1]]*y[[1]]$probabilities))
sum(rowSums(e_step[[1]][1,]*y[[1]]$probabilities))
sum(e_step[[1]][1,]*y[[1]]$probabilities)
pi_i=e_step[[1]]
typeof(pi_i)
pi_i=as.matrix(e_step[[1]])
typeof(pi_i)
pi_i=matrix(e_step[[1]])
typeof(pi_i)
pi_i
pi_i=e_step[[1]]
pi_i
prob=y[[1]]$probabilities
pi_i*prob
prob
pi_i%*%prob
sum(pi_i%*%prob)
install.packages("RcppArmadillo")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
install.packages("RcppArmadillo")
library(RcppArmadillo)
Rcpp::Rcpp.package.skeleton()
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::evalCpp("Rcpp::sourceCpp('03_RandomWalkImpute.cpp')")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
library(RcppArmadillo)
system.file(package = "RcppArmadillo")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("testarma.cpp")
Rcpp::sourceCpp("testarma.cpp")
Rcpp::sourceCpp("testarma.cpp")
Rcpp::sourceCpp("testarma.cpp")
install.packages("remotes")
macrtools::macos_rtools_install()
remotes::install_github("coatless-mac/macrtools")
macrtools::macos_rtools_install()
Rcpp::sourceCpp("testarma.cpp")
# We can check if Xcode CLI is present using:
macrtools::is_xcode_cli_installed()
# We can verify gfortran is present as well
macrtools::is_gfortran_installed()
# See if Xcode.app IDE is in use
macrtools::is_xcode_app_installed()
Rcpp::sourceCpp("testarma.cpp")
Rcpp::sourceCpp("testarma.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
install.packages("RccpArmadillo")
install.packages("RcppArmadillo")
library(RcppArmadillo)
Rcpp::sourceCpp("testarma.cpp")
Rcpp::sourceCpp("testarma.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("05_EM_Step.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
Rcpp::sourceCpp("03_RandomWalkImpute.cpp")
